def is_valid(v, pos, path, graph):
    # Check if vertex v can be added to the current path
    if graph[path[pos - 1]][v] == 0:
        return False

    # Check if the vertex has not already been visited
    if v in path:
        return False

    return True

def hamiltonian_circuit_util(graph, path, pos):
    if pos == len(graph):
        # If all vertices are visited, check if there is an edge from the last to the first vertex
        if graph[path[pos - 1]][path[0]] == 1:
            return True
        return False

    for v in range(1, len(graph)):
        if is_valid(v, pos, path, graph):
            path[pos] = v

            if hamiltonian_circuit_util(graph, path, pos + 1):
                return True

            # Backtrack if adding the current vertex doesn't lead to a solution
            path[pos] = -1

    return False

def hamiltonian_circuit(graph):
    n = len(graph)
    path = [-1] * n
    path[0] = 0  # Start from the first vertex

    if not hamiltonian_circuit_util(graph, path, 1):
        print("Hamiltonian Circuit does not exist.")
        return None

    print("Hamiltonian Circuit:")
    print(" -> ".join(map(str, path + [path[0]])))
    return path + [path[0]]

if __name__ == "__main__":
    # Example usage
    graph = [
        [0, 1, 1, 1, 0],
        [1, 0, 1, 0, 1],
        [1, 1, 0, 1, 1],
        [1, 0, 1, 0, 1],
        [0, 1, 1, 1, 0]
    ]

    hamiltonian_circuit(graph)
