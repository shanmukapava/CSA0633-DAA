def subset_sum_backtracking(numbers, target_sum):
    def backtrack(start, current_sum, current_subset):
        if current_sum == target_sum:
            result.append(current_subset[:])
            return

        for i in range(start, len(numbers)):
            if current_sum + numbers[i] <= target_sum:
                current_subset.append(numbers[i])
                backtrack(i + 1, current_sum + numbers[i], current_subset)
                current_subset.pop()

    result = []
    numbers.sort()  # Sorting the numbers to optimize the backtracking
    backtrack(0, 0, [])
    return result

# Example usage:
numbers = [1, 2, 3, 4, 5]
target_sum = 8

subsets = subset_sum_backtracking(numbers, target_sum)

print(f"Subsets with sum {target_sum}:")
for subset in subsets:
    print(subset)
